"use strict";(self.webpackChunkextension_documentation=self.webpackChunkextension_documentation||[]).push([[14],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>b});var a=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var m=a.createContext({}),s=function(t){var e=a.useContext(m),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=s(t.components);return a.createElement(m.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,m=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),u=s(n),b=i,$=u["".concat(m,".").concat(b)]||u[b]||p[b]||r;return n?a.createElement($,o(o({ref:e},c),{},{components:n})):a.createElement($,o({ref:e},c))}));function b(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var m in e)hasOwnProperty.call(e,m)&&(l[m]=e[m]);l.originalType=t,l.mdxType="string"==typeof t?t:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5296:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:2},o="Templates",l={unversionedId:"recipies/templates",id:"recipies/templates",title:"Templates",description:"Material",source:"@site/docs/07_recipies/02_templates.md",sourceDirName:"07_recipies",slug:"/recipies/templates",permalink:"/extension-documentation/docs/recipies/templates",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Architectures",permalink:"/extension-documentation/docs/recipies/architectures"},next:{title:"Starter Kits",permalink:"/extension-documentation/docs/recipies/stater-kits"}},m={},s=[{value:"Material",id:"material",level:2}],c={toc:s};function p(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"templates"},"Templates"),(0,i.kt)("h2",{id:"material"},"Material"),(0,i.kt)("p",null,"Set of Angular Material Templates."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"html-templates.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "lines": {\n    "paragraph": "<p>$content$</p>"\n  },\n  "cards": {\n    "simple": "<mat-card *ngIf=\\"$itemVariable$\\">$itemVariable$</mat-card>"\n  },\n  "layouts": {\n    "card": "<mat-card><mat-card-title></mat-card-title><mat-card-content></mat-card-content></mat-card>",\n    "toolbar": "<mat-toolbar color=\\"primary\\"></mat-toolbar>",\n    "stepper": "<mat-stepper #stepper>\\n  <mat-step label=\\"Step 1\\">\\n    <section>Step 2</section>\\n    <div>\\n      <button mat-button matStepperNext>Next</button>\\n    </div>\\n  </mat-step>\\n  <mat-step label=\\"Step 2\\">\\n    <section>Step 2</section>\\n    <div>\\n      <button mat-button matStepperPrevious>Back</button>\\n      <button mat-button matStepperNext>Next</button>\\n    </div>\\n  </mat-step>\\n  <mat-step label=\\"Done\\">\\n    <p>You are now done.</p>\\n    <div>\\n      <button mat-button matStepperPrevious>Back</button>\\n      <button mat-button (click)=\\"stepper.reset()\\">Reset</button>\\n    </div>\\n  </mat-step>\\n</mat-stepper>",\n    "tabs": "<mat-tab-group>\\n  <mat-tab label=\\"First\\"> Content 1 </mat-tab>\\n  <mat-tab label=\\"Second\\"> Content 2 </mat-tab>\\n  <mat-tab label=\\"Third\\"> Content 3 </mat-tab>\\n</mat-tab-group>",\n    "layouts": "<mat-button-toggle-group name=\\"fontStyle\\" aria-label=\\"Font Style\\">\\n  <mat-button-toggle value=\\"bold\\">Bold</mat-button-toggle>\\n  <mat-button-toggle value=\\"italic\\">Italic</mat-button-toggle>\\n  <mat-button-toggle value=\\"underline\\">Underline</mat-button-toggle>\\n</mat-button-toggle-group>",\n    "table": "<table mat-table [dataSource]=\\"dataSource\\" class=\\"mat-elevation-z8\\">\\n  <ng-container matColumnDef=\\"position\\">\\n    <th mat-header-cell *matHeaderCellDef> No. </th>\\n    <td mat-cell *matCellDef=\\"let element\\"> {{element.position}} </td>\\n  </ng-container>\\n  <tr mat-header-row *matHeaderRowDef=\\"displayedColumns\\"></tr>\\n  <tr mat-row *matRowDef=\\"let row; columns: displayedColumns;\\"></tr>\\n</table>"\n  },\n  "inputs": {\n    "input-default": "<input matInput type=\\"text\\" placeholder=\\"$label$\\" formControlName=\\"$formControlName$\\" required>",\n    "input-text": "<input matInput type=\\"text\\" placeholder=\\"$label$\\" formControlName=\\"$formControlName$\\" required>",\n    "input-number": "<input matInput type=\\"number\\" placeholder=\\"$label$\\" formControlName=\\"$formControlName$\\" required>",\n    "input-submit": "<button type=\\"submit\\" mat-raised-button color=\\"primary\\">$content$</button>"\n  },\n  "forms": {\n    "mat-form": {\n      "input": "<div><mat-form-field appearance=\\"fill\\"><mat-label>$label$</mat-label>$inputs.input-text$<mat-error *ngIf=\\"$formVariable$.get(\'$formControlName$\')!.invalid\\">$formControlName$ is invalid</mat-error></mat-form-field></div>",\n      "formSubmit": "<div>$inputs.input-submit$</div>",\n      "form": "<form [formGroup]=\\"$formVariable$\\" (ngSubmit)=\\"$submitCallback$\\">$content$</form>"\n    }\n  },\n  "lists": {\n    "list": {\n      "list": "<mat-list role=\\"list\\">$content$</mat-list>",\n      "item": "<mat-list-item role=\\"listitem\\" *ngFor=\\"let $itemVariable$ of $listVariable$\\">{{$itemVariable$}}</mat-list-item>"\n    },\n    "selection-list": {\n      "list": "<mat-selection-list role=\\"list\\">$content$</mat-selection-list>",\n      "item": "<mat-list-option role=\\"listitem\\" *ngFor=\\"let $itemVariable$ of $listVariable$\\">{{$itemVariable$}}</mat-list-option>"\n    },\n    "navbar": {\n      "list": "<mat-list role=\\"list\\" fxLayout=\\"row\\">\\n  $content$\\n</mat-list>",\n      "item": "<mat-list-item role=\\"listitem\\" *ngFor=\\"let $itemVariable$ of $listVariable$\\">\\n  {{$itemVariable$}}\\n</mat-list-item>"\n    },\n    "chip-list": {\n      "list": "<mat-chip-list aria-label=\\"Fish selection\\">\\n  $content$\\n</mat-chip-list>",\n      "item": "<mat-chip *ngFor=\\"let $itemVariable$ of $listVariable$\\">\\n {{$itemVariable$}}\\n</mat-chip>"\n    },\n    "accordion": {\n      "list": "<mat-accordion>\\n   $content$\\n</mat-accordion>",\n      "item": "<mat-expansion-panel *ngFor=\\"let $itemVariable$ of $listVariable$\\">\\n    <mat-expansion-panel-header>\\n      <mat-panel-title>\\n        This is a title\\n      </mat-panel-title>\\n      <mat-panel-description>\\n        This is a summary of the content\\n      </mat-panel-description>\\n    </mat-expansion-panel-header>\\n    {{$itemVariable$}}\\n  </mat-expansion-panel>"\n    },\n    "grid-list": {\n      "list": "<mat-grid-list cols=\\"2\\" rowHeight=\\"2:1\\">\\n  $content$\\n</mat-grid-list>",\n      "item": "<mat-grid-tile *ngFor=\\"let $itemVariable$ of $listVariable$\\">\\n  {{$itemVariable$}}\\n</mat-grid-tile>"\n    },\n    "menu": {\n      "list": "<button mat-button [matMenuTriggerFor]=\\"menu\\">Menu</button>\\n<mat-menu #menu=\\"matMenu\\">\\n  $content$\\n</mat-menu>",\n      "item": "<button mat-menu-item *ngFor=\\"let $itemVariable$ of $listVariable$\\">\\n  {{$itemVariable$}}\\n</button>"\n    },\n    "select": {\n      "list": "<mat-form-field appearance=\\"fill\\">\\n  <mat-label>Choose an option</mat-label>\\n  <mat-select>\\n    $content$\\n   </mat-select>\\n</mat-form-field>",\n      "item": "<mat-option *ngFor=\\"let $itemVariable$ of $listVariable$\\" [value]=\\"$itemVariable$\\">\\n     {{$itemVariable$}}    \\n</mat-option>"\n    },\n    "radio-group": {\n      "list": "<mat-radio-group aria-label=\\"Select an option\\">\\n  $content$\\n</mat-radio-group>",\n      "item": "<mat-radio-button *ngFor=\\"let $itemVariable$ of $listVariable$\\">{{$itemVariable$}}</mat-radio-button>"\n    },\n    "checkbox": {\n      "list": "<section>\\n  $content$\\n</section>",\n      "item": "<mat-checkbox *ngFor=\\"let $itemVariable$ of $listVariable$\\">{{$itemVariable$}}</mat-checkbox>"\n    }\n  },\n  "details": {\n    "content": {\n      "container": "<ng-container *ngIf=\\"$detailVariable$ | async as $itemVariable$\\">$content$</ng-container>",\n      "content": "$content$"\n    },\n    "text": {\n      "container": "<ng-container *ngIf=\\"$detailVariable$ | async as $itemVariable$\\">$content$</ng-container>",\n      "content": "{{ $itemVariable$ }}"\n    }\n  }\n}\n\n\n')))}p.isMDXComponent=!0}}]);